{
  "name": "Project DB",
  "tagline": "",
  "body": "## PostgresSQL Container Mangement for DBaaS\r\n\r\n### Command Line Documentation\r\n\r\n#### Creating New Databases\r\n\r\nTo create a new database container use the postgres_create.py script as follows:\r\n\r\n```\r\n ./postgres_create.py --help\r\nUsage: postgres_create.py --name=<container/dbname> --dbuser=<username> --password=<password> --owner=<owner> --description='<description>' [--memlimit=<num><m/g> (optional)]\r\n\r\nOptions:\r\n  --version             show program's version number and exit\r\n  -h, --help            show this help message and exit\r\n  -n NAME, --name=NAME  Set the name of the container and database\r\n  -u DBUSER, --dbuser=DBUSER\r\n                        Set the database username\r\n  -p PASSWD, --password=PASSWD\r\n                        Set the dbuser's password\r\n  -o OWNER, --owner=OWNER\r\n                        Set the owner of the container/db\r\n  -c CONTACT, --contact=CONTACT\r\n                        Set database contact (email)\r\n  -d DESCRIPTION, --description=DESCRIPTION\r\n                        Set the descriptoin of the container/db\r\n  -m MEMLIMIT, --memlimit=MEMLIMIT\r\n                        Set the maximum RAM that the containter can use.\r\n                        Specify \"m\" for MB and \"g\" for GB - ex: 512m, 2g\r\n                        (optional) - defaults to 2g if no limit provided\r\n\r\n```\r\n\r\nFor example, to create a PostgresSQL 9.5 database container with the following attributes:\r\n\r\n- **Container name / DB Name:**  scicomp_demo\r\n- **DB username:** scicomp\r\n- **DB password:** demopassword01\r\n- **Owner:** ad/scicomp\r\n- **Contact:** rmcdermo@fredhutch.org\r\n- **Description:** \"Demo DB for scicomp\"\r\n- **Mem limit:** 768MB of RAM\r\n\r\nYou would use the following command:\r\n\r\n```\r\n./postgres_create.py --name scicomp_demo \\\r\n                     --dbuser scicomp \\\r\n                     --password demopassword01 \\\r\n                     --owner ad/scicomp \\\r\n                     --contact rmcdermo@fredhutch.org \\\r\n                     --description \"Demo DB for SciComp\" \\\r\n                     --memlimit 768m\r\n```\r\n\r\nThe output of the command confirming that the DB was created would look like the following:\r\n\r\n```\r\nCONTAINER ID        NAMES               PORTS                     STATUS\r\n288453e3c82a        scicomp_demo        0.0.0.0:32792->5432/tcp   Up Less than a second\r\n```\r\nThe above output means that the database container was sucessfully created and is listing on TCP port 32792 on the DBaaS host for client connections.\r\n\r\n#### Listing the DBaaS Containers\r\n\r\nTo see a list of all the DBaaS containers running with the details of the containers, run the following command:\r\n\r\n```\r\n./postgres_list.py\r\n```\r\n\r\nThe output of the above command should look something like the following:\r\n\r\n```\r\ncontainer_name  container_id  db_name         username   port   mem_limit size       owner           contact                   status\r\nmaxquant4       9b6e30304b28  maxquant4       maxquant   32812  2048MB    2.5MB      vi/paulovich_a  clin@fredhutch.org        Up 3 hours\r\nmaxquant3       24ed1a9200e7  maxquant3       maxquant   32811  2048MB    600KB      vi/paulovich_a  clin@fredhutch.org        Up 3 hours\r\nmaxquant2       32922e049ce5  maxquant2       maxquant   32810  768MB     63MB       vi/paulovich_a  clin@fredhutch.org        Up 4 hours\r\nmaxquant        389a1941130f  maxquant        maxquant   32804  768MB     1.3MB      vi/paulovich_a  clin@fredhutch.org        Up 4 hours\r\njimmy           87795f7b365d  jimmy           maxquant   32803  768MB     117.4MB    vi/paulovich_a  clin@fredhutch.org        Up 4 hours\r\nscicomp_demo    288453e3c82a  scicomp_demo    scicomp    32792  None      5.33GB     ad/scicomp      rmcdermo@fredhutch.org    Up 28 hours\r\ndemodb01        18d67e487b68  demodb01        demouser   32791  None      63GB       None            demo@fredhutch.org        Up 29 hours\r\ntrump_db        18eb91dfc2de  trump_db        trump      32790  None      17.75MB    tt/trump        trump@trump.com           Up 29 hours\r\nturdblossom     a3bc3dadbf6c  turdblossom     turd       32789  None      254.54MB   cr/turd         turd@fredhutch.com        Up 29 hours\r\ncpas            6a706cbec97b  cpas            cpas       32787  None      563MB      sr/proteomics   gafking@fredhutch.org     Up 30 hours\r\nit_budget       1ce047c36987  it_budget       budget     32786  None      639MB      ad/finance      mrmoney@fredhutch.org     Up 30 hours\r\ngenomic_stuff   d65b81b75e37  genomic_stuff   genoics    32785  None      989KB      sr/genomic      jdelrow@fredhutch.org     Up 30 hours\r\noncoscape_brain 58972326c5c6  oncoscape_brain oncoscape  32784  None      777KB      hb/sttr         rmcdermo@fredhutch.org    Up 30 hours\r\ntestlabel       01940f0c27e6  testlabel       test       32783  None      17.55MB    ad/scicomp      rmcdermo@fredhutch.org    Up 30 hours\r\n```\r\n\r\n#### Database Backups\r\n\r\nTo backup all running DBaaS postgres database containers and send the backups to the cloud (S3 bucket), run the following command on your DBaaS host:\r\n\r\n```\r\n./postgres_backup.py\r\n```\r\n\r\nThe above command will perform a DB dump of all running database containers and place the backups in '/var/db-backups'. In addition to local backups, this will also send the backups to and AWS S3 stoage bucket at s3://fredhutch-postgres-backups. The output of this command will look like this:\r\n\r\n```\r\nDBaaS Backups for Thu Mar  3 16:28:32 2016\r\n--------------------------------------------------\r\nDumping  scicomp_demo DB (/var/db-backups//scicomp_demo_2016-03-03_16-28-32.sql)\r\nDumping  demodb01 DB (/var/db-backups//demodb01_2016-03-03_16-28-32.sql)\r\nDumping  trump_db DB (/var/db-backups//trump_db_2016-03-03_16-28-32.sql)\r\nDumping  turdblossom DB (/var/db-backups//turdblossom_2016-03-03_16-28-32.sql)\r\nDumping  cpas DB (/var/db-backups//cpas_2016-03-03_16-28-32.sql)\r\nDumping  it_budget DB (/var/db-backups//it_budget_2016-03-03_16-28-32.sql)\r\nDumping  genomic_stuff DB (/var/db-backups//genomic_stuff_2016-03-03_16-28-32.sql)\r\nDumping  oncoscape_brain DB (/var/db-backups//oncoscape_brain_2016-03-03_16-28-32.sql)\r\nDumping  testlabel DB (/var/db-backups//testlabel_2016-03-03_16-28-32.sql)\r\n\r\nSending backups to the Cloud (s3://fredhutch-postgres-backups)\r\n--------------------------------------------------\r\n/var/db-backups/trump_db_2016-03-03_16-28-32.sql --> s3://fredhutch-postgres-backups/trump_db_2016-03-03_16-28-32.sql\r\n/var/db-backups/testlabel_2016-03-03_16-28-32.sql --> s3://fredhutch-postgres-backups/testlabel_2016-03-03_16-28-32.sql\r\n/var/db-backups/turdblossom_2016-03-03_16-28-32.sql --> s3://fredhutch-postgres-backups/turdblossom_2016-03-03_16-28-32.sql\r\n/var/db-backups/scicomp_demo_2016-03-03_16-28-32.sql --> s3://fredhutch-postgres-backups/scicomp_demo_2016-03-03_16-28-32.sql\r\n/var/db-backups/it_budget_2016-03-03_16-28-32.sql --> s3://fredhutch-postgres-backups/it_budget_2016-03-03_16-28-32.sql\r\n/var/db-backups/cpas_2016-03-03_16-28-32.sql --> s3://fredhutch-postgres-backups/cpas_2016-03-03_16-28-32.sql\r\n/var/db-backups/genomic_stuff_2016-03-03_16-28-32.sql --> s3://fredhutch-postgres-backups/genomic_stuff_2016-03-03_16-28-32.sql\r\n/var/db-backups/oncoscape_brain_2016-03-03_16-28-32.sql --> s3://fredhutch-postgres-backups/oncoscape_brain_2016-03-03_16-28-32.sql\r\n/var/db-backups/demodb01_2016-03-03_16-28-32.sql --> s3://fredhutch-postgres-backups/demodb01_2016-03-03_16-28-32.sql\r\n```\r\n\r\n### Web Interface\r\n\r\nA very basic web console if provided. To run it you'll need Python 2.7 and Flask installed (apt-get install -y python-flask). To run the web console just execute the \"webui.py\" script and point a web browser at \"http://servername:1776\" (replace \"servername\" with the name of the system were you are running the script.\r\n\r\nIf everything is working, you'll be presended with the following web page:\r\n\r\n![index](../roberts_branch/images/index.png?raw=true)\r\n\r\nTo get a list of the current database conatiners running on the system, click on the \"List Database Containers\" link, which should result in something similar to the following:\r\n\r\n![list](../roberts_branch/images/list.png?raw=true)\r\n\r\nTo create a new database container, click on the \"Create a Database Container\" link, which will present you with a form similar to the following:\r\n\r\n![create](../roberts_branch/images/create.png?raw=true)\r\n\r\nFill out the form **completely** and click \"Submit\" which will result in a page similar to the following being displayed:\r\n\r\n![created](../roberts_branch/images/created.png?raw=true)\r\n\r\nTo view an inventory of database backup archives that are currently backed up to Amazon S3, click on the \"List Database Backup Archives\" link. This will provide you will a backup inventory similar to the page shown below:\r\n\r\n![backups](../roberts_branch/images/backups.png?raw=true)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}